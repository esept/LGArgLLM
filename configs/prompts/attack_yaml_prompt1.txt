You are given a **claim** and a corresponding argument `Ai`.

Your task is to:
1. Determine whether `Ai` supports the claim (`cate: P`) or supports the negation of the claim (`cate: S`);
2. Assign a confidence score to `Ai` that reflects how strongly and reliably it contributes to reasoning about the claim;
3. Recursively construct an **attack tree** for `Ai`, introducing logically valid counter-arguments and counter-counter-arguments as needed.

---

## Input Requirements (IMPORTANT):

- **The input argument is labeled with a specific ID, such as "A3" or "A12". Use this exact ID for the root argument — do NOT rename it to "Ai".**
- **The `text` field for the root argument must be copied exactly as provided. Do NOT paraphrase, summarize, or regenerate it. It must remain identical to the input argument.**

---

## Step 1: Determine `Ai.cate`

- If `Ai` logically supports the truth of the claim → assign `cate: P`
- If `Ai` supports the negation of the claim or presents the claim as misleading, incorrect, or overgeneralized → assign `cate: S`

Only `Ai` should include the `cate` field. All other arguments omit it.

---

## Step 2: Assign `Ai.confidence`

Assign a `confidence` score to `Ai` based on the strength, reliability, and generality of the argument:

- `0.9–1.0`: Widely accepted facts, textbook definitions, authoritative scientific consensus
- `0.7–0.89`: Solid, well-known arguments with minor exceptions
- `0.5–0.69`: Narrowly applicable, context-dependent, or exception-based statements
- `< 0.5`: Use only for speculative, edge-case, or philosophically doubtful statements

**Special Rule:**  
If `Ai` is based on exceptions, rare cases, or edge semantics (e.g., anatomical anomalies, definitional ambiguity), assign a **clearly lower confidence** (typically `< 0.7`).

---

## Step 3: Construct the Attack Tree

1. Generate a set of first-level counter-arguments (B-layer), each directly **attacking `Ai`**.
2. For each `Bi`, generate second-level counter-arguments (`C` layer), each attacking its respective `Bi`.
3. Continue recursively as needed to ensure logical completeness.

All arguments beyond `Ai` must include:

- `id`: "B1", "C2", "D3", etc.
- `text`: A clear, logically sound counter-argument
- `confidence`: A float from 0 to 1 based on factual strength and typicality
- `attacks`: List of IDs it attacks

---

## Attack Guidelines:

In building the attack tree, diversify your attacks by using:

- Logical contradictions or inconsistencies
- Empirical/statistical counterexamples
- Scope or definition challenges
- Relevance/contextual rebuttals
- Challenges to source or authority

**Important:**  
If a counter-argument relies on an edge case or rare exception, **its confidence must be significantly lower** than the mainstream argument it attacks.

Do not include weakly related, vague, or intentionally incorrect statements.

---

## Output Format (YAML)

```yaml
Arguments:
  - id: A3  # use exact ID from input
    text: "Original input argument text copied exactly."
    confidence: 0.91
    cate: P
    attacks: []

  - id: B1
    text: "Counter-argument to A3."
    confidence: 0.68
    attacks: [A3]

  - id: C1
    text: "Counter-argument to B1."
    confidence: 0.88
    attacks: [B1]
```
Only use YAML format (not JSON).
Use strict syntax and double quotes " for all strings.
Do not modify the original argument or its ID.

Output only the YAML under Arguments: — no commentary or explanation.

## Summary

Build a structurally consistent, semantically rigorous attack tree starting from a single argument.
Assign accurate cate and confidence values to the root argument, and calibrate all counter-arguments accordingly.
Ensure that edge-case reasoning is structurally visible but numerically downweighted.
Preserve the original ID and text of the root argument exactly as given.